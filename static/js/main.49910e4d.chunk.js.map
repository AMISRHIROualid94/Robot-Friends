{"version":3,"sources":["conponents/Card.js","conponents/Cardlist.js","conponents/SearchBox.js","conponents/Scroll.js","containers/App.js","actions.js","constante.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","username","email","className","alt","src","Cardlist","robots","CardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","state","date","Date","fetch","then","response","json","users","setState","setInterval","tick","this","searchfiled","OnSearchChange","filterSearch","filter","robot","name","toLowerCase","includes","length","toLocaleTimeString","Component","connect","console","log","dispatch","event","text","target","value","payload","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49910e4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({id,username,email})=>{\r\n    return (\r\n            <div className=\"bg-light-green dib br3 pa2 ma2 grow tc bw2 shadow-5\">\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n                <div>\r\n                    <h2>{username}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n  \r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots})=>{\r\n\r\n    const CardArray = robots.map((user,i)=>{\r\n        return <Card key ={i} id={robots[i].id} username={robots[i].username} email={robots[i].email}/>;\r\n    })\r\n    return(\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input \r\n        className=\"pa3 bg-light-blue ba b--green\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\" \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'3px solid black',height:'100vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Scroll;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../conponents/Cardlist';\r\nimport SearchBox from '../conponents/SearchBox';\r\nimport Scroll from '../conponents/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchFiled} from '../actions'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(new Date(),'mapStatetoprops')\r\n    return {\r\n        searchfiled : state.searchfiled\r\n    }\r\n       \r\n    \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log(new Date(),'mapDispatchToProps')\r\n    return({\r\n        OnSearchChange : (event) => dispatch(setSearchFiled(event.target.value))\r\n        \r\n    })\r\n}\r\nclass App extends Component{\r\n   constructor(){\r\n       super();\r\n       this.state =({\r\n            robots:[],\r\n            date : new Date()\r\n       })\r\n   }\r\n\r\n   componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n        return response.json()})\r\n    .then(users => {\r\n        this.setState({robots:users})\r\n    })   \r\n    setInterval(() => this.tick(), 1000);\r\n   }\r\n\r\n   tick(){\r\n       this.setState({date:new Date()})\r\n   }\r\n\r\n    render(){\r\n        const {robots,date} = this.state;\r\n        const {searchfiled,OnSearchChange} = this.props;\r\n        const filterSearch = robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchfiled.toLowerCase());\r\n        })\r\n        /*robots.lenght === 0 <=> (robots.length will recieve 0 like a default value\r\n            & javascript evaluate it to false so we need to add '!')*/\r\n return !robots.length ?\r\n          <h1 className=\"tc f1\">{date.toLocaleTimeString()}</h1> :\r\n       (\r\n            <div className=\"tc\">\r\n            <h1 className=\"f2\">RobotFriends</h1>\r\n            <SearchBox searchChange={OnSearchChange}/>\r\n            <Scroll>\r\n            <Cardlist robots={filterSearch}/>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FILED }  from './constante.js';\r\n\r\n\r\nexport const setSearchFiled = (text) => {\r\n    console.log(new Date(),'setSearchFiled')\r\n    return ({\r\n    type : CHANGE_SEARCH_FILED,\r\n    payload : text\r\n})\r\n}\r\n","export const CHANGE_SEARCH_FILED = 'CHANGE_SEARCH_FILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FILED }  from './constante.js';\r\n\r\nconst initialState = {\r\n    searchfiled : ''\r\n}\r\n\r\nexport  const searchRobots = (state=initialState, action={}) => {\r\n    console.log(new Date(),'searchRobots');\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FILED :\r\n            return Object.assign({},state,{searchfiled:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducer';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n  <React.StrictMode>\n          <Provider store={store}>\n             <App />\n          </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}