{"version":3,"sources":["reducer.js","conponents/Card.js","conponents/Cardlist.js","conponents/SearchBox.js","conponents/Scroll.js","containers/App.js","actions.js","constante.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchfiled","initialStateRobots","isPending","robots","error","Card","id","username","email","className","alt","src","Cardlist","CardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","state","date","Date","this","OnRequestRobots","setState","OnSearchChange","filterSearch","filter","robot","name","toLowerCase","includes","toLocaleTimeString","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducers","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f1330b0c.chunk.js","sourcesContent":["import { \r\n    CHANGE_SEARCH_FILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n}  from './constante.js';\r\n\r\nconst initialStateSearch = {\r\n    searchfiled : ''\r\n}\r\n\r\nexport  const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FILED :\r\n            return Object.assign({},state,{searchfiled:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending : false,\r\n    robots : [],\r\n    error :''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload,isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({id,username,email})=>{\r\n    return (\r\n            <div className=\"bg-light-green dib br3 pa2 ma2 grow tc bw2 shadow-5\">\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n                <div>\r\n                    <h2>{username}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n  \r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots})=>{\r\n\r\n    const CardArray = robots.map((user,i)=>{\r\n        return <Card key ={i} id={robots[i].id} username={robots[i].username} email={robots[i].email}/>;\r\n    })\r\n    return(\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input \r\n        className=\"pa3 bg-light-blue ba b--green\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\" \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'3px solid black',height:'100vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Scroll;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../conponents/Cardlist';\r\nimport SearchBox from '../conponents/SearchBox';\r\nimport Scroll from '../conponents/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchFiled, requestRobots} from '../actions'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfiled : state.searchRobots.searchfiled,\r\n        robots : state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error : state.requestRobots.error\r\n    }\r\n       \r\n    \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return({\r\n        OnSearchChange : (event) => dispatch(setSearchFiled(event.target.value)),\r\n        OnRequestRobots : () => dispatch(requestRobots())\r\n        \r\n    })\r\n}\r\nclass App extends Component{\r\n   constructor(){\r\n       super();\r\n       this.state =({\r\n            date : new Date()\r\n       })\r\n   }\r\n\r\n   componentDidMount(){\r\n    this.props.OnRequestRobots()\r\n   }\r\n\r\n   tick(){\r\n       this.setState({date:new Date()})\r\n   }\r\n\r\n    render(){\r\n        const {date} = this.state;\r\n        const {robots,searchfiled,OnSearchChange,isPending} = this.props;\r\n        const filterSearch = robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchfiled.toLowerCase());\r\n        })\r\n        /*robots.lenght === 0 <=> (robots.length will recieve 0 like a default value\r\n            & javascript evaluate it to false so we need to add '!')*/\r\n return isPending ?\r\n          <h1 className=\"tc f1\">{date.toLocaleTimeString()}</h1> :\r\n       (\r\n            <div className=\"tc\">\r\n            <h1 className=\"f2\">RobotFriends</h1>\r\n            <SearchBox searchChange={OnSearchChange}/>\r\n            <Scroll>\r\n            <Cardlist robots={filterSearch}/>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n}  from './constante.js';\r\n\r\n\r\nexport const setSearchFiled = (text) => ({\r\n    type : CHANGE_SEARCH_FILED,\r\n    payload : text\r\n})\r\n\r\n\r\nexport const requestRobots = () => \r\n    (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>  response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCH_FILED = 'CHANGE_SEARCH_FILED';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport ThunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots,requestRobots } from './reducer';\nimport './index.css';\nimport App from './containers/App';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootReducers = combineReducers({searchRobots,requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootReducers,applyMiddleware(ThunkMiddleware,logger))\n\nReactDOM.render(\n  <React.StrictMode>\n          <Provider store={store}>\n             <App />\n          </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}